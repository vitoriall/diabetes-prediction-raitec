
LÓGICA DO CÓDIGO DE CLASSIFICAÇÃO DE DIABETES COM RANDOM FOREST

OBJETIVO GERAL:
Construir um modelo de classificação binária com Random Forest, priorizando o recall da classe positiva (1), ou seja, minimizar os falsos negativos — essencial em aplicações médicas como a detecção de diabetes.

1. Carregamento dos Dados (load_data)
- Usa pandas para ler o arquivo CSV de forma simples e reutilizável.

2. Limpeza dos Dados (clean_data)
- Zeros em colunas clínicas como Glucose, BloodPressure, etc., são tratados como valores ausentes (NaN), pois não fazem sentido fisiológico.
- Preenchimento com a mediana evita distorções por outliers, comuns em dados biomédicos.

3. Treinamento do Modelo (train_model)
- RandomForestClassifier é escolhido por ser robusto e lidar bem com dados numéricos sem necessidade de normalização.
- Parâmetro class_weight={0: 1, 1: 3} prioriza a classe 1 (diabéticos), que costuma ser minoritária.
- random_state=42 garante reprodutibilidade dos resultados.

4. Avaliação do Modelo (evaluate_model)
- predict_proba gera probabilidades para cada classe.
- Um limiar (threshold) reduzido para 0.3 em vez do padrão 0.5 aumenta a sensibilidade para classe 1, elevando o recall.
- recall_score e precision_score são usados para avaliar desempenho focando na classe positiva.
- classification_report mostra métricas completas, incluindo F1-score.
- confusion_matrix exibe verdadeiros positivos, falsos negativos e falsos positivos, o que é essencial para avaliação em contextos clínicos.

5. Divisão do Conjunto de Dados
- train_test_split com stratify=y assegura que a proporção entre classes (diabéticos e não-diabéticos) seja mantida nos conjuntos de treino e teste.

CONCLUSÃO:
O código prioriza a detecção de casos positivos(diabetes)
